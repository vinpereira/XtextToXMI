/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mapping.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mapping.mapping.Definition;
import org.xtext.example.mapping.mapping.FormalElement;
import org.xtext.example.mapping.mapping.Mapping;
import org.xtext.example.mapping.mapping.MappingPackage;
import org.xtext.example.mapping.mapping.TypeElement;
import org.xtext.example.mapping.mapping.UmlElement;
import org.xtext.example.mapping.services.MappingGrammarAccess;

@SuppressWarnings("all")
public class MappingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MappingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MappingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MappingPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case MappingPackage.FORMAL_ELEMENT:
				sequence_FormalElement(context, (FormalElement) semanticObject); 
				return; 
			case MappingPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case MappingPackage.TYPE_ELEMENT:
				sequence_TypeElement(context, (TypeElement) semanticObject); 
				return; 
			case MappingPackage.UML_ELEMENT:
				sequence_UmlElement(context, (UmlElement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Definition returns Definition
	 *
	 * Constraint:
	 *     (formalElement=FormalElement umlElement=UmlElement typeElement=TypeElement)
	 */
	protected void sequence_Definition(ISerializationContext context, Definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.DEFINITION__FORMAL_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.DEFINITION__FORMAL_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.DEFINITION__UML_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.DEFINITION__UML_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.DEFINITION__TYPE_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.DEFINITION__TYPE_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefinitionAccess().getFormalElementFormalElementParserRuleCall_0_0(), semanticObject.getFormalElement());
		feeder.accept(grammarAccess.getDefinitionAccess().getUmlElementUmlElementParserRuleCall_2_0(), semanticObject.getUmlElement());
		feeder.accept(grammarAccess.getDefinitionAccess().getTypeElementTypeElementParserRuleCall_4_0(), semanticObject.getTypeElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FormalElement returns FormalElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FormalElement(ISerializationContext context, FormalElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.FORMAL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.FORMAL_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFormalElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     definitions+=Definition+
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeElement returns TypeElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeElement(ISerializationContext context, TypeElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.TYPE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.TYPE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UmlElement returns UmlElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_UmlElement(ISerializationContext context, UmlElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.UML_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.UML_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUmlElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
