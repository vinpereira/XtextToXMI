/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mapping.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MappingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mapping.Mapping.Mapping");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0 = (RuleCall)cDefinitionsAssignment.eContents().get(0);
		
		//Mapping:
		//	definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//definitions+=Definition*
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0() { return cDefinitionsDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mapping.Mapping.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormalElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormalElementFormalElementParserRuleCall_0_0 = (RuleCall)cFormalElementAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUmlElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUmlElementUmlElementParserRuleCall_2_0 = (RuleCall)cUmlElementAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeElementTypeElementParserRuleCall_4_0 = (RuleCall)cTypeElementAssignment_4.eContents().get(0);
		
		//Definition:
		//	formalElement=FormalElement ',' umlElement=UmlElement ',' typeElement=TypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//formalElement=FormalElement ',' umlElement=UmlElement ',' typeElement=TypeElement
		public Group getGroup() { return cGroup; }
		
		//formalElement=FormalElement
		public Assignment getFormalElementAssignment_0() { return cFormalElementAssignment_0; }
		
		//FormalElement
		public RuleCall getFormalElementFormalElementParserRuleCall_0_0() { return cFormalElementFormalElementParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//umlElement=UmlElement
		public Assignment getUmlElementAssignment_2() { return cUmlElementAssignment_2; }
		
		//UmlElement
		public RuleCall getUmlElementUmlElementParserRuleCall_2_0() { return cUmlElementUmlElementParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//typeElement=TypeElement
		public Assignment getTypeElementAssignment_4() { return cTypeElementAssignment_4; }
		
		//TypeElement
		public RuleCall getTypeElementTypeElementParserRuleCall_4_0() { return cTypeElementTypeElementParserRuleCall_4_0; }
	}
	public class FormalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mapping.Mapping.FormalElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FormalElement:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class UmlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mapping.Mapping.UmlElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UmlElement:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mapping.Mapping.TypeElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeElement:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final MappingElements pMapping;
	private final DefinitionElements pDefinition;
	private final FormalElementElements pFormalElement;
	private final UmlElementElements pUmlElement;
	private final TypeElementElements pTypeElement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MappingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMapping = new MappingElements();
		this.pDefinition = new DefinitionElements();
		this.pFormalElement = new FormalElementElements();
		this.pUmlElement = new UmlElementElements();
		this.pTypeElement = new TypeElementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mapping.Mapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mapping:
	//	definitions+=Definition*;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Definition:
	//	formalElement=FormalElement ',' umlElement=UmlElement ',' typeElement=TypeElement;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//FormalElement:
	//	name=ID;
	public FormalElementElements getFormalElementAccess() {
		return pFormalElement;
	}
	
	public ParserRule getFormalElementRule() {
		return getFormalElementAccess().getRule();
	}
	
	//UmlElement:
	//	name=ID;
	public UmlElementElements getUmlElementAccess() {
		return pUmlElement;
	}
	
	public ParserRule getUmlElementRule() {
		return getUmlElementAccess().getRule();
	}
	
	//TypeElement:
	//	name=ID;
	public TypeElementElements getTypeElementAccess() {
		return pTypeElement;
	}
	
	public ParserRule getTypeElementRule() {
		return getTypeElementAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
