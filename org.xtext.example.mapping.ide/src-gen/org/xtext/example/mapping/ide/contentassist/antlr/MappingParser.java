/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mapping.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mapping.ide.contentassist.antlr.internal.InternalMappingParser;
import org.xtext.example.mapping.services.MappingGrammarAccess;

public class MappingParser extends AbstractContentAssistParser {

	@Inject
	private MappingGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMappingParser createParser() {
		InternalMappingParser result = new InternalMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getMappingAccess().getDefinitionsAssignment(), "rule__Mapping__DefinitionsAssignment");
					put(grammarAccess.getDefinitionAccess().getFormalElementAssignment_0(), "rule__Definition__FormalElementAssignment_0");
					put(grammarAccess.getDefinitionAccess().getUmlElementAssignment_2(), "rule__Definition__UmlElementAssignment_2");
					put(grammarAccess.getDefinitionAccess().getTypeElementAssignment_4(), "rule__Definition__TypeElementAssignment_4");
					put(grammarAccess.getFormalElementAccess().getNameAssignment(), "rule__FormalElement__NameAssignment");
					put(grammarAccess.getUmlElementAccess().getNameAssignment(), "rule__UmlElement__NameAssignment");
					put(grammarAccess.getTypeElementAccess().getNameAssignment(), "rule__TypeElement__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMappingParser typedParser = (InternalMappingParser) parser;
			typedParser.entryRuleMapping();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
