/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FormalResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.FormalResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormalResultsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cTimenodesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cTimenodesTimeNodeParserRuleCall_3_0_0_0 = (RuleCall)cTimenodesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cTimenodesAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cTimenodesTimeNodeParserRuleCall_3_0_1_1_0 = (RuleCall)cTimenodesAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cFormalElementsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cFormalElementsFormalElementParserRuleCall_3_1_0_0 = (RuleCall)cFormalElementsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cFormalElementsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cFormalElementsFormalElementParserRuleCall_3_1_1_1_0 = (RuleCall)cFormalElementsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FormalResult:
		//	'FormalResults' name=ID '{' (timenodes+=TimeNode (',' timenodes+=TimeNode)* | formalElements+=FormalElement (','
		//	formalElements+=FormalElement)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FormalResults' name=ID '{' (timenodes+=TimeNode (',' timenodes+=TimeNode)* | formalElements+=FormalElement (','
		//formalElements+=FormalElement)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'FormalResults'
		public Keyword getFormalResultsKeyword_0() { return cFormalResultsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(timenodes+=TimeNode (',' timenodes+=TimeNode)* | formalElements+=FormalElement (',' formalElements+=FormalElement)*)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//timenodes+=TimeNode (',' timenodes+=TimeNode)*
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//timenodes+=TimeNode
		public Assignment getTimenodesAssignment_3_0_0() { return cTimenodesAssignment_3_0_0; }
		
		//TimeNode
		public RuleCall getTimenodesTimeNodeParserRuleCall_3_0_0_0() { return cTimenodesTimeNodeParserRuleCall_3_0_0_0; }
		
		//(',' timenodes+=TimeNode)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_3_0_1_0() { return cCommaKeyword_3_0_1_0; }
		
		//timenodes+=TimeNode
		public Assignment getTimenodesAssignment_3_0_1_1() { return cTimenodesAssignment_3_0_1_1; }
		
		//TimeNode
		public RuleCall getTimenodesTimeNodeParserRuleCall_3_0_1_1_0() { return cTimenodesTimeNodeParserRuleCall_3_0_1_1_0; }
		
		//formalElements+=FormalElement (',' formalElements+=FormalElement)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//formalElements+=FormalElement
		public Assignment getFormalElementsAssignment_3_1_0() { return cFormalElementsAssignment_3_1_0; }
		
		//FormalElement
		public RuleCall getFormalElementsFormalElementParserRuleCall_3_1_0_0() { return cFormalElementsFormalElementParserRuleCall_3_1_0_0; }
		
		//(',' formalElements+=FormalElement)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//formalElements+=FormalElement
		public Assignment getFormalElementsAssignment_3_1_1_1() { return cFormalElementsAssignment_3_1_1_1; }
		
		//FormalElement
		public RuleCall getFormalElementsFormalElementParserRuleCall_3_1_1_1_0() { return cFormalElementsFormalElementParserRuleCall_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TimeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.TimeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFormalelementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalelementFormalElementParserRuleCall_3_0 = (RuleCall)cFormalelementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFormalelementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFormalelementFormalElementParserRuleCall_4_1_0 = (RuleCall)cFormalelementAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeNode:
		//	'TimeNode' name=ID '{'
		//	formalelement+=FormalElement (',' formalelement+=FormalElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TimeNode' name=ID '{' formalelement+=FormalElement (',' formalelement+=FormalElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'TimeNode'
		public Keyword getTimeNodeKeyword_0() { return cTimeNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//formalelement+=FormalElement
		public Assignment getFormalelementAssignment_3() { return cFormalelementAssignment_3; }
		
		//FormalElement
		public RuleCall getFormalelementFormalElementParserRuleCall_3_0() { return cFormalelementFormalElementParserRuleCall_3_0; }
		
		//(',' formalelement+=FormalElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//formalelement+=FormalElement
		public Assignment getFormalelementAssignment_4_1() { return cFormalelementAssignment_4_1; }
		
		//FormalElement
		public RuleCall getFormalelementFormalElementParserRuleCall_4_1_0() { return cFormalelementFormalElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FormalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.FormalElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormalElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFormalElementFormalElementCrossReference_1_0 = (CrossReference)cFormalElementAssignment_1.eContents().get(0);
		private final RuleCall cFormalElementFormalElementIDTerminalRuleCall_1_0_1 = (RuleCall)cFormalElementFormalElementCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FormalElement:
		//	'FormalElement' formalElement=[map::FormalElement] '{' //mappingchecker=MappingChecker '{'
		//	element=Element
		//	//'Refers to' umlElement=[map::UmlElement]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FormalElement' formalElement=[map::FormalElement] '{' //mappingchecker=MappingChecker '{'
		//element=Element //'Refers to' umlElement=[map::UmlElement]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FormalElement'
		public Keyword getFormalElementKeyword_0() { return cFormalElementKeyword_0; }
		
		//formalElement=[map::FormalElement]
		public Assignment getFormalElementAssignment_1() { return cFormalElementAssignment_1; }
		
		//[map::FormalElement]
		public CrossReference getFormalElementFormalElementCrossReference_1_0() { return cFormalElementFormalElementCrossReference_1_0; }
		
		//ID
		public RuleCall getFormalElementFormalElementIDTerminalRuleCall_1_0_1() { return cFormalElementFormalElementIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////mappingchecker=MappingChecker '{'
		//element=Element
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_3_0() { return cElementElementParserRuleCall_3_0; }
		
		////'Refers to' umlElement=[map::UmlElement]
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefersToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeElementTypeElementCrossReference_1_0 = (CrossReference)cTypeElementAssignment_1.eContents().get(0);
		private final RuleCall cTypeElementTypeElementIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeElementTypeElementCrossReference_1_0.eContents().get(1);
		private final Keyword cElementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWithIDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUmlElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cUmlElementUmlElementCrossReference_5_0 = (CrossReference)cUmlElementAssignment_5.eContents().get(0);
		private final RuleCall cUmlElementUmlElementIDTerminalRuleCall_5_0_1 = (RuleCall)cUmlElementUmlElementCrossReference_5_0.eContents().get(1);
		private final Keyword cBelongsToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cDiagramAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cDiagramDiagramParserRuleCall_7_0_0 = (RuleCall)cDiagramAssignment_7_0.eContents().get(0);
		private final Assignment cModelAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cModelModelParserRuleCall_7_1_0 = (RuleCall)cModelAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////MappingChecker:
		////	'using' mapping=Mapping
		////;
		////
		////Mapping:
		////	'mapping at' mappingFile=STRING
		////;
		//Element: //'Refers to' kind=ElementKind 'element' '{'
		//	'Refers to' typeElement=[map::TypeElement] 'element' '{' 'With ID' umlElement=[map::UmlElement] 'Belongs to'
		//	(diagram=Diagram | model=Model) '}';
		@Override public ParserRule getRule() { return rule; }
		
		////'Refers to' kind=ElementKind 'element' '{'
		//'Refers to' typeElement=[map::TypeElement] 'element' '{' 'With ID' umlElement=[map::UmlElement] 'Belongs to'
		//(diagram=Diagram | model=Model) '}'
		public Group getGroup() { return cGroup; }
		
		////'Refers to' kind=ElementKind 'element' '{'
		//'Refers to'
		public Keyword getRefersToKeyword_0() { return cRefersToKeyword_0; }
		
		//typeElement=[map::TypeElement]
		public Assignment getTypeElementAssignment_1() { return cTypeElementAssignment_1; }
		
		//[map::TypeElement]
		public CrossReference getTypeElementTypeElementCrossReference_1_0() { return cTypeElementTypeElementCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeElementTypeElementIDTerminalRuleCall_1_0_1() { return cTypeElementTypeElementIDTerminalRuleCall_1_0_1; }
		
		//'element'
		public Keyword getElementKeyword_2() { return cElementKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'With ID'
		public Keyword getWithIDKeyword_4() { return cWithIDKeyword_4; }
		
		//umlElement=[map::UmlElement]
		public Assignment getUmlElementAssignment_5() { return cUmlElementAssignment_5; }
		
		//[map::UmlElement]
		public CrossReference getUmlElementUmlElementCrossReference_5_0() { return cUmlElementUmlElementCrossReference_5_0; }
		
		//ID
		public RuleCall getUmlElementUmlElementIDTerminalRuleCall_5_0_1() { return cUmlElementUmlElementIDTerminalRuleCall_5_0_1; }
		
		//'Belongs to'
		public Keyword getBelongsToKeyword_6() { return cBelongsToKeyword_6; }
		
		//(diagram=Diagram | model=Model)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//diagram=Diagram
		public Assignment getDiagramAssignment_7_0() { return cDiagramAssignment_7_0; }
		
		//Diagram
		public RuleCall getDiagramDiagramParserRuleCall_7_0_0() { return cDiagramDiagramParserRuleCall_7_0_0; }
		
		//model=Model
		public Assignment getModelAssignment_7_1() { return cModelAssignment_7_1; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_7_1_0() { return cModelModelParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindDiagramKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelModelParserRuleCall_2_0 = (RuleCall)cModelAssignment_2.eContents().get(0);
		
		////enum ElementKind:
		////	CLASS='Class' |
		////	ATTRIBUTE='Attribute' |
		////	OPERATION='Operation' |
		////	LIFELINE='LifeLine' |
		////	PARAMETER='Parameter' |
		////	MESSAGE='Message' |
		////	STATE='State' |
		////	TRANSITION='Transition' |
		////	OBJECT='Object' |
		////	ACTION='Action' |
		////	CONTROLFLOW='ControlFlow'
		////;
		//Diagram:
		//	kind=DiagramKind 'from' model=Model;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=DiagramKind 'from' model=Model
		public Group getGroup() { return cGroup; }
		
		//kind=DiagramKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//DiagramKind
		public RuleCall getKindDiagramKindEnumRuleCall_0_0() { return cKindDiagramKindEnumRuleCall_0_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//model=Model
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_2_0() { return cModelModelParserRuleCall_2_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.Model");
		private final Assignment cKindAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cKindModelKindEnumRuleCall_0 = (RuleCall)cKindAssignment.eContents().get(0);
		
		//Model:
		//	kind=ModelKind;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=ModelKind
		public Assignment getKindAssignment() { return cKindAssignment; }
		
		//ModelKind
		public RuleCall getKindModelKindEnumRuleCall_0() { return cKindModelKindEnumRuleCall_0; }
	}
	
	public class DiagramKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.DiagramKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCLASSDIAGRAMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCLASSDIAGRAMClassDiagramKeyword_0_0 = (Keyword)cCLASSDIAGRAMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSEQUENCEDIAGRAMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSEQUENCEDIAGRAMSequenceDiagramKeyword_1_0 = (Keyword)cSEQUENCEDIAGRAMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTATEDIAGRAMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTATEDIAGRAMStateDiagramKeyword_2_0 = (Keyword)cSTATEDIAGRAMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOBJECTDIAGRAMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOBJECTDIAGRAMObjectDiagramKeyword_3_0 = (Keyword)cOBJECTDIAGRAMEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINTERACTIONOVERVIEWDIAGRAMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINTERACTIONOVERVIEWDIAGRAMInteractionOverviewDiagramKeyword_4_0 = (Keyword)cINTERACTIONOVERVIEWDIAGRAMEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DiagramKind:
		//	CLASSDIAGRAM='ClassDiagram' |
		//	SEQUENCEDIAGRAM='SequenceDiagram' |
		//	STATEDIAGRAM='StateDiagram' |
		//	OBJECTDIAGRAM='ObjectDiagram' |
		//	INTERACTIONOVERVIEWDIAGRAM='InteractionOverviewDiagram';
		public EnumRule getRule() { return rule; }
		
		//CLASSDIAGRAM='ClassDiagram' | SEQUENCEDIAGRAM='SequenceDiagram' | STATEDIAGRAM='StateDiagram' |
		//OBJECTDIAGRAM='ObjectDiagram' | INTERACTIONOVERVIEWDIAGRAM='InteractionOverviewDiagram'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CLASSDIAGRAM='ClassDiagram'
		public EnumLiteralDeclaration getCLASSDIAGRAMEnumLiteralDeclaration_0() { return cCLASSDIAGRAMEnumLiteralDeclaration_0; }
		
		//'ClassDiagram'
		public Keyword getCLASSDIAGRAMClassDiagramKeyword_0_0() { return cCLASSDIAGRAMClassDiagramKeyword_0_0; }
		
		//SEQUENCEDIAGRAM='SequenceDiagram'
		public EnumLiteralDeclaration getSEQUENCEDIAGRAMEnumLiteralDeclaration_1() { return cSEQUENCEDIAGRAMEnumLiteralDeclaration_1; }
		
		//'SequenceDiagram'
		public Keyword getSEQUENCEDIAGRAMSequenceDiagramKeyword_1_0() { return cSEQUENCEDIAGRAMSequenceDiagramKeyword_1_0; }
		
		//STATEDIAGRAM='StateDiagram'
		public EnumLiteralDeclaration getSTATEDIAGRAMEnumLiteralDeclaration_2() { return cSTATEDIAGRAMEnumLiteralDeclaration_2; }
		
		//'StateDiagram'
		public Keyword getSTATEDIAGRAMStateDiagramKeyword_2_0() { return cSTATEDIAGRAMStateDiagramKeyword_2_0; }
		
		//OBJECTDIAGRAM='ObjectDiagram'
		public EnumLiteralDeclaration getOBJECTDIAGRAMEnumLiteralDeclaration_3() { return cOBJECTDIAGRAMEnumLiteralDeclaration_3; }
		
		//'ObjectDiagram'
		public Keyword getOBJECTDIAGRAMObjectDiagramKeyword_3_0() { return cOBJECTDIAGRAMObjectDiagramKeyword_3_0; }
		
		//INTERACTIONOVERVIEWDIAGRAM='InteractionOverviewDiagram'
		public EnumLiteralDeclaration getINTERACTIONOVERVIEWDIAGRAMEnumLiteralDeclaration_4() { return cINTERACTIONOVERVIEWDIAGRAMEnumLiteralDeclaration_4; }
		
		//'InteractionOverviewDiagram'
		public Keyword getINTERACTIONOVERVIEWDIAGRAMInteractionOverviewDiagramKeyword_4_0() { return cINTERACTIONOVERVIEWDIAGRAMInteractionOverviewDiagramKeyword_4_0; }
	}
	public class ModelKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dsl.Trace.ModelKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUMLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUMLUMLModelKeyword_0_0 = (Keyword)cUMLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSysMLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSysMLSysMLModelKeyword_1_0 = (Keyword)cSysMLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBPMNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBPMNBMPNModelKeyword_2_0 = (Keyword)cBPMNEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ModelKind:
		//	UML='UMLModel' |
		//	SysML='SysMLModel' |
		//	BPMN='BMPNModel';
		public EnumRule getRule() { return rule; }
		
		//UML='UMLModel' | SysML='SysMLModel' | BPMN='BMPNModel'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UML='UMLModel'
		public EnumLiteralDeclaration getUMLEnumLiteralDeclaration_0() { return cUMLEnumLiteralDeclaration_0; }
		
		//'UMLModel'
		public Keyword getUMLUMLModelKeyword_0_0() { return cUMLUMLModelKeyword_0_0; }
		
		//SysML='SysMLModel'
		public EnumLiteralDeclaration getSysMLEnumLiteralDeclaration_1() { return cSysMLEnumLiteralDeclaration_1; }
		
		//'SysMLModel'
		public Keyword getSysMLSysMLModelKeyword_1_0() { return cSysMLSysMLModelKeyword_1_0; }
		
		//BPMN='BMPNModel'
		public EnumLiteralDeclaration getBPMNEnumLiteralDeclaration_2() { return cBPMNEnumLiteralDeclaration_2; }
		
		//'BMPNModel'
		public Keyword getBPMNBMPNModelKeyword_2_0() { return cBPMNBMPNModelKeyword_2_0; }
	}
	
	private final FormalResultElements pFormalResult;
	private final TimeNodeElements pTimeNode;
	private final FormalElementElements pFormalElement;
	private final ElementElements pElement;
	private final DiagramElements pDiagram;
	private final DiagramKindElements eDiagramKind;
	private final ModelElements pModel;
	private final ModelKindElements eModelKind;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFormalResult = new FormalResultElements();
		this.pTimeNode = new TimeNodeElements();
		this.pFormalElement = new FormalElementElements();
		this.pElement = new ElementElements();
		this.pDiagram = new DiagramElements();
		this.eDiagramKind = new DiagramKindElements();
		this.pModel = new ModelElements();
		this.eModelKind = new ModelKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.dsl.Trace".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FormalResult:
	//	'FormalResults' name=ID '{' (timenodes+=TimeNode (',' timenodes+=TimeNode)* | formalElements+=FormalElement (','
	//	formalElements+=FormalElement)*)
	//	'}';
	public FormalResultElements getFormalResultAccess() {
		return pFormalResult;
	}
	
	public ParserRule getFormalResultRule() {
		return getFormalResultAccess().getRule();
	}
	
	//TimeNode:
	//	'TimeNode' name=ID '{'
	//	formalelement+=FormalElement (',' formalelement+=FormalElement)*
	//	'}';
	public TimeNodeElements getTimeNodeAccess() {
		return pTimeNode;
	}
	
	public ParserRule getTimeNodeRule() {
		return getTimeNodeAccess().getRule();
	}
	
	//FormalElement:
	//	'FormalElement' formalElement=[map::FormalElement] '{' //mappingchecker=MappingChecker '{'
	//	element=Element
	//	//'Refers to' umlElement=[map::UmlElement]
	//	'}';
	public FormalElementElements getFormalElementAccess() {
		return pFormalElement;
	}
	
	public ParserRule getFormalElementRule() {
		return getFormalElementAccess().getRule();
	}
	
	////MappingChecker:
	////	'using' mapping=Mapping
	////;
	////
	////Mapping:
	////	'mapping at' mappingFile=STRING
	////;
	//Element: //'Refers to' kind=ElementKind 'element' '{'
	//	'Refers to' typeElement=[map::TypeElement] 'element' '{' 'With ID' umlElement=[map::UmlElement] 'Belongs to'
	//	(diagram=Diagram | model=Model) '}';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	////enum ElementKind:
	////	CLASS='Class' |
	////	ATTRIBUTE='Attribute' |
	////	OPERATION='Operation' |
	////	LIFELINE='LifeLine' |
	////	PARAMETER='Parameter' |
	////	MESSAGE='Message' |
	////	STATE='State' |
	////	TRANSITION='Transition' |
	////	OBJECT='Object' |
	////	ACTION='Action' |
	////	CONTROLFLOW='ControlFlow'
	////;
	//Diagram:
	//	kind=DiagramKind 'from' model=Model;
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}
	
	//enum DiagramKind:
	//	CLASSDIAGRAM='ClassDiagram' |
	//	SEQUENCEDIAGRAM='SequenceDiagram' |
	//	STATEDIAGRAM='StateDiagram' |
	//	OBJECTDIAGRAM='ObjectDiagram' |
	//	INTERACTIONOVERVIEWDIAGRAM='InteractionOverviewDiagram';
	public DiagramKindElements getDiagramKindAccess() {
		return eDiagramKind;
	}
	
	public EnumRule getDiagramKindRule() {
		return getDiagramKindAccess().getRule();
	}
	
	//Model:
	//	kind=ModelKind;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//enum ModelKind:
	//	UML='UMLModel' |
	//	SysML='SysMLModel' |
	//	BPMN='BMPNModel';
	public ModelKindElements getModelKindAccess() {
		return eModelKind;
	}
	
	public EnumRule getModelKindRule() {
		return getModelKindAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
