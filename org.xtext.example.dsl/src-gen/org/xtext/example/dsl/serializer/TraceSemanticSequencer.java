/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.dsl.services.TraceGrammarAccess;
import org.xtext.example.dsl.trace.Diagram;
import org.xtext.example.dsl.trace.Element;
import org.xtext.example.dsl.trace.FormalElement;
import org.xtext.example.dsl.trace.FormalResult;
import org.xtext.example.dsl.trace.Model;
import org.xtext.example.dsl.trace.TimeNode;
import org.xtext.example.dsl.trace.TracePackage;

@SuppressWarnings("all")
public class TraceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TracePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TracePackage.DIAGRAM:
				sequence_Diagram(context, (Diagram) semanticObject); 
				return; 
			case TracePackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case TracePackage.FORMAL_ELEMENT:
				sequence_FormalElement(context, (FormalElement) semanticObject); 
				return; 
			case TracePackage.FORMAL_RESULT:
				sequence_FormalResult(context, (FormalResult) semanticObject); 
				return; 
			case TracePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TracePackage.TIME_NODE:
				sequence_TimeNode(context, (TimeNode) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Diagram returns Diagram
	 *
	 * Constraint:
	 *     (kind=DiagramKind model=Model)
	 */
	protected void sequence_Diagram(ISerializationContext context, Diagram semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TracePackage.Literals.DIAGRAM__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TracePackage.Literals.DIAGRAM__KIND));
			if (transientValues.isValueTransient(semanticObject, TracePackage.Literals.DIAGRAM__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TracePackage.Literals.DIAGRAM__MODEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiagramAccess().getKindDiagramKindEnumRuleCall_0_0(), semanticObject.getKind());
		feeder.accept(grammarAccess.getDiagramAccess().getModelModelParserRuleCall_2_0(), semanticObject.getModel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (typeElement=[TypeElement|ID] umlElement=[UmlElement|ID] (diagram=Diagram | model=Model))
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormalElement returns FormalElement
	 *
	 * Constraint:
	 *     (formalElement=[FormalElement|ID] element=Element)
	 */
	protected void sequence_FormalElement(ISerializationContext context, FormalElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TracePackage.Literals.FORMAL_ELEMENT__FORMAL_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TracePackage.Literals.FORMAL_ELEMENT__FORMAL_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, TracePackage.Literals.FORMAL_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TracePackage.Literals.FORMAL_ELEMENT__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFormalElementAccess().getFormalElementFormalElementIDTerminalRuleCall_1_0_1(), semanticObject.getFormalElement());
		feeder.accept(grammarAccess.getFormalElementAccess().getElementElementParserRuleCall_3_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FormalResult returns FormalResult
	 *
	 * Constraint:
	 *     (name=ID ((timenodes+=TimeNode timenodes+=TimeNode*) | (formalElements+=FormalElement formalElements+=FormalElement*)))
	 */
	protected void sequence_FormalResult(ISerializationContext context, FormalResult semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     kind=ModelKind
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TracePackage.Literals.MODEL__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TracePackage.Literals.MODEL__KIND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getKindModelKindEnumRuleCall_0(), semanticObject.getKind());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeNode returns TimeNode
	 *
	 * Constraint:
	 *     (name=ID formalelement+=FormalElement formalelement+=FormalElement*)
	 */
	protected void sequence_TimeNode(ISerializationContext context, TimeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
