/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.dsl.trace.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.dsl.trace.FormalElement;
import org.xtext.example.dsl.trace.FormalResult;
import org.xtext.example.dsl.trace.TimeNode;
import org.xtext.example.dsl.trace.TracePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Formal Result</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.dsl.trace.impl.FormalResultImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.dsl.trace.impl.FormalResultImpl#getTimenodes <em>Timenodes</em>}</li>
 *   <li>{@link org.xtext.example.dsl.trace.impl.FormalResultImpl#getFormalElements <em>Formal Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FormalResultImpl extends MinimalEObjectImpl.Container implements FormalResult
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTimenodes() <em>Timenodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimenodes()
   * @generated
   * @ordered
   */
  protected EList<TimeNode> timenodes;

  /**
   * The cached value of the '{@link #getFormalElements() <em>Formal Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormalElements()
   * @generated
   * @ordered
   */
  protected EList<FormalElement> formalElements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormalResultImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TracePackage.Literals.FORMAL_RESULT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TracePackage.FORMAL_RESULT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TimeNode> getTimenodes()
  {
    if (timenodes == null)
    {
      timenodes = new EObjectContainmentEList<TimeNode>(TimeNode.class, this, TracePackage.FORMAL_RESULT__TIMENODES);
    }
    return timenodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FormalElement> getFormalElements()
  {
    if (formalElements == null)
    {
      formalElements = new EObjectContainmentEList<FormalElement>(FormalElement.class, this, TracePackage.FORMAL_RESULT__FORMAL_ELEMENTS);
    }
    return formalElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TracePackage.FORMAL_RESULT__TIMENODES:
        return ((InternalEList<?>)getTimenodes()).basicRemove(otherEnd, msgs);
      case TracePackage.FORMAL_RESULT__FORMAL_ELEMENTS:
        return ((InternalEList<?>)getFormalElements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TracePackage.FORMAL_RESULT__NAME:
        return getName();
      case TracePackage.FORMAL_RESULT__TIMENODES:
        return getTimenodes();
      case TracePackage.FORMAL_RESULT__FORMAL_ELEMENTS:
        return getFormalElements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TracePackage.FORMAL_RESULT__NAME:
        setName((String)newValue);
        return;
      case TracePackage.FORMAL_RESULT__TIMENODES:
        getTimenodes().clear();
        getTimenodes().addAll((Collection<? extends TimeNode>)newValue);
        return;
      case TracePackage.FORMAL_RESULT__FORMAL_ELEMENTS:
        getFormalElements().clear();
        getFormalElements().addAll((Collection<? extends FormalElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TracePackage.FORMAL_RESULT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TracePackage.FORMAL_RESULT__TIMENODES:
        getTimenodes().clear();
        return;
      case TracePackage.FORMAL_RESULT__FORMAL_ELEMENTS:
        getFormalElements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TracePackage.FORMAL_RESULT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TracePackage.FORMAL_RESULT__TIMENODES:
        return timenodes != null && !timenodes.isEmpty();
      case TracePackage.FORMAL_RESULT__FORMAL_ELEMENTS:
        return formalElements != null && !formalElements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //FormalResultImpl
