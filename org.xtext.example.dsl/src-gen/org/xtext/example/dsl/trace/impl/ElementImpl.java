/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.dsl.trace.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.dsl.trace.Diagram;
import org.xtext.example.dsl.trace.Element;
import org.xtext.example.dsl.trace.Model;
import org.xtext.example.dsl.trace.TracePackage;

import org.xtext.example.mapping.mapping.TypeElement;
import org.xtext.example.mapping.mapping.UmlElement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.dsl.trace.impl.ElementImpl#getTypeElement <em>Type Element</em>}</li>
 *   <li>{@link org.xtext.example.dsl.trace.impl.ElementImpl#getUmlElement <em>Uml Element</em>}</li>
 *   <li>{@link org.xtext.example.dsl.trace.impl.ElementImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@link org.xtext.example.dsl.trace.impl.ElementImpl#getModel <em>Model</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ElementImpl extends MinimalEObjectImpl.Container implements Element
{
  /**
   * The cached value of the '{@link #getTypeElement() <em>Type Element</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeElement()
   * @generated
   * @ordered
   */
  protected TypeElement typeElement;

  /**
   * The cached value of the '{@link #getUmlElement() <em>Uml Element</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUmlElement()
   * @generated
   * @ordered
   */
  protected UmlElement umlElement;

  /**
   * The cached value of the '{@link #getDiagram() <em>Diagram</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiagram()
   * @generated
   * @ordered
   */
  protected Diagram diagram;

  /**
   * The cached value of the '{@link #getModel() <em>Model</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModel()
   * @generated
   * @ordered
   */
  protected Model model;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TracePackage.Literals.ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeElement getTypeElement()
  {
    if (typeElement != null && typeElement.eIsProxy())
    {
      InternalEObject oldTypeElement = (InternalEObject)typeElement;
      typeElement = (TypeElement)eResolveProxy(oldTypeElement);
      if (typeElement != oldTypeElement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TracePackage.ELEMENT__TYPE_ELEMENT, oldTypeElement, typeElement));
      }
    }
    return typeElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeElement basicGetTypeElement()
  {
    return typeElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeElement(TypeElement newTypeElement)
  {
    TypeElement oldTypeElement = typeElement;
    typeElement = newTypeElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TracePackage.ELEMENT__TYPE_ELEMENT, oldTypeElement, typeElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UmlElement getUmlElement()
  {
    if (umlElement != null && umlElement.eIsProxy())
    {
      InternalEObject oldUmlElement = (InternalEObject)umlElement;
      umlElement = (UmlElement)eResolveProxy(oldUmlElement);
      if (umlElement != oldUmlElement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TracePackage.ELEMENT__UML_ELEMENT, oldUmlElement, umlElement));
      }
    }
    return umlElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UmlElement basicGetUmlElement()
  {
    return umlElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUmlElement(UmlElement newUmlElement)
  {
    UmlElement oldUmlElement = umlElement;
    umlElement = newUmlElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TracePackage.ELEMENT__UML_ELEMENT, oldUmlElement, umlElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Diagram getDiagram()
  {
    return diagram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDiagram(Diagram newDiagram, NotificationChain msgs)
  {
    Diagram oldDiagram = diagram;
    diagram = newDiagram;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TracePackage.ELEMENT__DIAGRAM, oldDiagram, newDiagram);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDiagram(Diagram newDiagram)
  {
    if (newDiagram != diagram)
    {
      NotificationChain msgs = null;
      if (diagram != null)
        msgs = ((InternalEObject)diagram).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TracePackage.ELEMENT__DIAGRAM, null, msgs);
      if (newDiagram != null)
        msgs = ((InternalEObject)newDiagram).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TracePackage.ELEMENT__DIAGRAM, null, msgs);
      msgs = basicSetDiagram(newDiagram, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TracePackage.ELEMENT__DIAGRAM, newDiagram, newDiagram));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model getModel()
  {
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModel(Model newModel, NotificationChain msgs)
  {
    Model oldModel = model;
    model = newModel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TracePackage.ELEMENT__MODEL, oldModel, newModel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModel(Model newModel)
  {
    if (newModel != model)
    {
      NotificationChain msgs = null;
      if (model != null)
        msgs = ((InternalEObject)model).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TracePackage.ELEMENT__MODEL, null, msgs);
      if (newModel != null)
        msgs = ((InternalEObject)newModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TracePackage.ELEMENT__MODEL, null, msgs);
      msgs = basicSetModel(newModel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TracePackage.ELEMENT__MODEL, newModel, newModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TracePackage.ELEMENT__DIAGRAM:
        return basicSetDiagram(null, msgs);
      case TracePackage.ELEMENT__MODEL:
        return basicSetModel(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TracePackage.ELEMENT__TYPE_ELEMENT:
        if (resolve) return getTypeElement();
        return basicGetTypeElement();
      case TracePackage.ELEMENT__UML_ELEMENT:
        if (resolve) return getUmlElement();
        return basicGetUmlElement();
      case TracePackage.ELEMENT__DIAGRAM:
        return getDiagram();
      case TracePackage.ELEMENT__MODEL:
        return getModel();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TracePackage.ELEMENT__TYPE_ELEMENT:
        setTypeElement((TypeElement)newValue);
        return;
      case TracePackage.ELEMENT__UML_ELEMENT:
        setUmlElement((UmlElement)newValue);
        return;
      case TracePackage.ELEMENT__DIAGRAM:
        setDiagram((Diagram)newValue);
        return;
      case TracePackage.ELEMENT__MODEL:
        setModel((Model)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TracePackage.ELEMENT__TYPE_ELEMENT:
        setTypeElement((TypeElement)null);
        return;
      case TracePackage.ELEMENT__UML_ELEMENT:
        setUmlElement((UmlElement)null);
        return;
      case TracePackage.ELEMENT__DIAGRAM:
        setDiagram((Diagram)null);
        return;
      case TracePackage.ELEMENT__MODEL:
        setModel((Model)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TracePackage.ELEMENT__TYPE_ELEMENT:
        return typeElement != null;
      case TracePackage.ELEMENT__UML_ELEMENT:
        return umlElement != null;
      case TracePackage.ELEMENT__DIAGRAM:
        return diagram != null;
      case TracePackage.ELEMENT__MODEL:
        return model != null;
    }
    return super.eIsSet(featureID);
  }

} //ElementImpl
