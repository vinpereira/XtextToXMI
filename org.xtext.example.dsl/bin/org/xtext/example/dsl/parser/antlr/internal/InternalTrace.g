/*
 * generated by Xtext 2.9.1
 */
grammar InternalTrace;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.dsl.services.TraceGrammarAccess;

}

@parser::members {

 	private TraceGrammarAccess grammarAccess;

    public InternalTraceParser(TokenStream input, TraceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FormalResult";
   	}

   	@Override
   	protected TraceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFormalResult
entryRuleFormalResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalResultRule()); }
	iv_ruleFormalResult=ruleFormalResult
	{ $current=$iv_ruleFormalResult.current; }
	EOF;

// Rule FormalResult
ruleFormalResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FormalResults'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormalResultAccess().getFormalResultsKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFormalResultAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormalResultRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFormalResultAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFormalResultAccess().getTimenodesTimeNodeParserRuleCall_3_0_0_0());
						}
						lv_timenodes_3_0=ruleTimeNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFormalResultRule());
							}
							add(
								$current,
								"timenodes",
								lv_timenodes_3_0,
								"org.xtext.example.dsl.Trace.TimeNode");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getFormalResultAccess().getCommaKeyword_3_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getFormalResultAccess().getTimenodesTimeNodeParserRuleCall_3_0_1_1_0());
							}
							lv_timenodes_5_0=ruleTimeNode
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFormalResultRule());
								}
								add(
									$current,
									"timenodes",
									lv_timenodes_5_0,
									"org.xtext.example.dsl.Trace.TimeNode");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFormalResultAccess().getFormalElementsFormalElementParserRuleCall_3_1_0_0());
						}
						lv_formalElements_6_0=ruleFormalElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFormalResultRule());
							}
							add(
								$current,
								"formalElements",
								lv_formalElements_6_0,
								"org.xtext.example.dsl.Trace.FormalElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7=','
					{
						newLeafNode(otherlv_7, grammarAccess.getFormalResultAccess().getCommaKeyword_3_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getFormalResultAccess().getFormalElementsFormalElementParserRuleCall_3_1_1_1_0());
							}
							lv_formalElements_8_0=ruleFormalElement
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFormalResultRule());
								}
								add(
									$current,
									"formalElements",
									lv_formalElements_8_0,
									"org.xtext.example.dsl.Trace.FormalElement");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getFormalResultAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTimeNode
entryRuleTimeNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeNodeRule()); }
	iv_ruleTimeNode=ruleTimeNode
	{ $current=$iv_ruleTimeNode.current; }
	EOF;

// Rule TimeNode
ruleTimeNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TimeNode'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeNodeAccess().getTimeNodeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTimeNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeNodeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeNodeAccess().getFormalelementFormalElementParserRuleCall_3_0());
				}
				lv_formalelement_3_0=ruleFormalElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeNodeRule());
					}
					add(
						$current,
						"formalelement",
						lv_formalelement_3_0,
						"org.xtext.example.dsl.Trace.FormalElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTimeNodeAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTimeNodeAccess().getFormalelementFormalElementParserRuleCall_4_1_0());
					}
					lv_formalelement_5_0=ruleFormalElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTimeNodeRule());
						}
						add(
							$current,
							"formalelement",
							lv_formalelement_5_0,
							"org.xtext.example.dsl.Trace.FormalElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTimeNodeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFormalElement
entryRuleFormalElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalElementRule()); }
	iv_ruleFormalElement=ruleFormalElement
	{ $current=$iv_ruleFormalElement.current; }
	EOF;

// Rule FormalElement
ruleFormalElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FormalElement'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormalElementAccess().getFormalElementKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormalElementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFormalElementAccess().getFormalElementFormalElementCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFormalElementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalElementAccess().getElementElementParserRuleCall_3_0());
				}
				lv_element_3_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalElementRule());
					}
					set(
						$current,
						"element",
						lv_element_3_0,
						"org.xtext.example.dsl.Trace.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormalElementAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Refers to'
		{
			newLeafNode(otherlv_0, grammarAccess.getElementAccess().getRefersToKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getElementAccess().getTypeElementTypeElementCrossReference_1_0());
				}
			)
		)
		otherlv_2='element'
		{
			newLeafNode(otherlv_2, grammarAccess.getElementAccess().getElementKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='With ID'
		{
			newLeafNode(otherlv_4, grammarAccess.getElementAccess().getWithIDKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getElementAccess().getUmlElementUmlElementCrossReference_5_0());
				}
			)
		)
		otherlv_6='Belongs to'
		{
			newLeafNode(otherlv_6, grammarAccess.getElementAccess().getBelongsToKeyword_6());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getDiagramDiagramParserRuleCall_7_0_0());
					}
					lv_diagram_7_0=ruleDiagram
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						set(
							$current,
							"diagram",
							lv_diagram_7_0,
							"org.xtext.example.dsl.Trace.Diagram");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getModelModelParserRuleCall_7_1_0());
					}
					lv_model_8_0=ruleModel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						set(
							$current,
							"model",
							lv_model_8_0,
							"org.xtext.example.dsl.Trace.Model");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getElementAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	iv_ruleDiagram=ruleDiagram
	{ $current=$iv_ruleDiagram.current; }
	EOF;

// Rule Diagram
ruleDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getKindDiagramKindEnumRuleCall_0_0());
				}
				lv_kind_0_0=ruleDiagramKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					set(
						$current,
						"kind",
						lv_kind_0_0,
						"org.xtext.example.dsl.Trace.DiagramKind");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='from'
		{
			newLeafNode(otherlv_1, grammarAccess.getDiagramAccess().getFromKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getModelModelParserRuleCall_2_0());
				}
				lv_model_2_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					set(
						$current,
						"model",
						lv_model_2_0,
						"org.xtext.example.dsl.Trace.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getKindModelKindEnumRuleCall_0());
			}
			lv_kind_0_0=ruleModelKind
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"kind",
					lv_kind_0_0,
					"org.xtext.example.dsl.Trace.ModelKind");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Rule DiagramKind
ruleDiagramKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ClassDiagram'
			{
				$current = grammarAccess.getDiagramKindAccess().getCLASSDIAGRAMEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDiagramKindAccess().getCLASSDIAGRAMEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SequenceDiagram'
			{
				$current = grammarAccess.getDiagramKindAccess().getSEQUENCEDIAGRAMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDiagramKindAccess().getSEQUENCEDIAGRAMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='StateDiagram'
			{
				$current = grammarAccess.getDiagramKindAccess().getSTATEDIAGRAMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDiagramKindAccess().getSTATEDIAGRAMEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='ObjectDiagram'
			{
				$current = grammarAccess.getDiagramKindAccess().getOBJECTDIAGRAMEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDiagramKindAccess().getOBJECTDIAGRAMEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='InteractionOverviewDiagram'
			{
				$current = grammarAccess.getDiagramKindAccess().getINTERACTIONOVERVIEWDIAGRAMEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDiagramKindAccess().getINTERACTIONOVERVIEWDIAGRAMEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule ModelKind
ruleModelKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='UMLModel'
			{
				$current = grammarAccess.getModelKindAccess().getUMLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModelKindAccess().getUMLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SysMLModel'
			{
				$current = grammarAccess.getModelKindAccess().getSysMLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModelKindAccess().getSysMLEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='BMPNModel'
			{
				$current = grammarAccess.getModelKindAccess().getBPMNEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getModelKindAccess().getBPMNEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
