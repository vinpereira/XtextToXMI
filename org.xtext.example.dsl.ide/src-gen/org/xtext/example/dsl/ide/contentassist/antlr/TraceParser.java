/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.dsl.ide.contentassist.antlr.internal.InternalTraceParser;
import org.xtext.example.dsl.services.TraceGrammarAccess;

public class TraceParser extends AbstractContentAssistParser {

	@Inject
	private TraceGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTraceParser createParser() {
		InternalTraceParser result = new InternalTraceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFormalResultAccess().getAlternatives_3(), "rule__FormalResult__Alternatives_3");
					put(grammarAccess.getElementAccess().getAlternatives_7(), "rule__Element__Alternatives_7");
					put(grammarAccess.getDiagramKindAccess().getAlternatives(), "rule__DiagramKind__Alternatives");
					put(grammarAccess.getModelKindAccess().getAlternatives(), "rule__ModelKind__Alternatives");
					put(grammarAccess.getFormalResultAccess().getGroup(), "rule__FormalResult__Group__0");
					put(grammarAccess.getFormalResultAccess().getGroup_3_0(), "rule__FormalResult__Group_3_0__0");
					put(grammarAccess.getFormalResultAccess().getGroup_3_0_1(), "rule__FormalResult__Group_3_0_1__0");
					put(grammarAccess.getFormalResultAccess().getGroup_3_1(), "rule__FormalResult__Group_3_1__0");
					put(grammarAccess.getFormalResultAccess().getGroup_3_1_1(), "rule__FormalResult__Group_3_1_1__0");
					put(grammarAccess.getTimeNodeAccess().getGroup(), "rule__TimeNode__Group__0");
					put(grammarAccess.getTimeNodeAccess().getGroup_4(), "rule__TimeNode__Group_4__0");
					put(grammarAccess.getFormalElementAccess().getGroup(), "rule__FormalElement__Group__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getDiagramAccess().getGroup(), "rule__Diagram__Group__0");
					put(grammarAccess.getFormalResultAccess().getNameAssignment_1(), "rule__FormalResult__NameAssignment_1");
					put(grammarAccess.getFormalResultAccess().getTimenodesAssignment_3_0_0(), "rule__FormalResult__TimenodesAssignment_3_0_0");
					put(grammarAccess.getFormalResultAccess().getTimenodesAssignment_3_0_1_1(), "rule__FormalResult__TimenodesAssignment_3_0_1_1");
					put(grammarAccess.getFormalResultAccess().getFormalElementsAssignment_3_1_0(), "rule__FormalResult__FormalElementsAssignment_3_1_0");
					put(grammarAccess.getFormalResultAccess().getFormalElementsAssignment_3_1_1_1(), "rule__FormalResult__FormalElementsAssignment_3_1_1_1");
					put(grammarAccess.getTimeNodeAccess().getNameAssignment_1(), "rule__TimeNode__NameAssignment_1");
					put(grammarAccess.getTimeNodeAccess().getFormalelementAssignment_3(), "rule__TimeNode__FormalelementAssignment_3");
					put(grammarAccess.getTimeNodeAccess().getFormalelementAssignment_4_1(), "rule__TimeNode__FormalelementAssignment_4_1");
					put(grammarAccess.getFormalElementAccess().getFormalElementAssignment_1(), "rule__FormalElement__FormalElementAssignment_1");
					put(grammarAccess.getFormalElementAccess().getElementAssignment_3(), "rule__FormalElement__ElementAssignment_3");
					put(grammarAccess.getElementAccess().getTypeElementAssignment_1(), "rule__Element__TypeElementAssignment_1");
					put(grammarAccess.getElementAccess().getUmlElementAssignment_5(), "rule__Element__UmlElementAssignment_5");
					put(grammarAccess.getElementAccess().getDiagramAssignment_7_0(), "rule__Element__DiagramAssignment_7_0");
					put(grammarAccess.getElementAccess().getModelAssignment_7_1(), "rule__Element__ModelAssignment_7_1");
					put(grammarAccess.getDiagramAccess().getKindAssignment_0(), "rule__Diagram__KindAssignment_0");
					put(grammarAccess.getDiagramAccess().getModelAssignment_2(), "rule__Diagram__ModelAssignment_2");
					put(grammarAccess.getModelAccess().getKindAssignment(), "rule__Model__KindAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalTraceParser typedParser = (InternalTraceParser) parser;
			typedParser.entryRuleFormalResult();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TraceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TraceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
